{"version":3,"sources":["logo.svg","App.js","utils.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","_this","this","mapsPromise","Promise","resolve","reject","window","resolveMapsPromise","google","script","document","createElement","src","concat","async","body","appendChild","placesPromise","fsAPI","fetch","then","resp","json","loadPlaces","all","values","console","log","places","response","venues","map","maps","Map","getElementById","zoom","center","lat","lng","markers","forEach","venue","marker","Marker","position","location","id","name","animation","Animation","DROP","addListener","getAnimation","setAnimation","BOUNCE","setTimeout","react_default","a","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6LCkEzBC,8LA3DM,IAAAC,EAAAC,KAGdC,ECAI,IAAIC,QAAQ,SAASC,EAASC,GAEjCC,OAAOC,mBAAqB,WAExBH,EAAQE,OAAOE,eAERF,OAAOC,oBAGlB,IAAME,EAASC,SAASC,cAAc,UAItCF,EAAOG,IAAP,+CAAAC,OAHgB,0CAGhB,gCACAJ,EAAOK,OAAQ,EACfJ,SAASK,KAAKC,YAAYP,KDd3BQ,ECqBA,WACH,IAKIC,EAAK,yDAAAL,OALS,mDAKT,mBAAAA,OAJa,mDAIb,oBAAAA,OAFG,MAEH,QAAAA,OAHA,oBAGA,0CAET,OAAOM,MAAMD,GAAOE,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SD7BnBC,GAEpBpB,QAAQqB,IAAI,CACVtB,EACAe,IACCG,KAAK,SAAAK,GACNC,QAAQC,IAAIF,GACZ,IAAIjB,EAASiB,EAAO,GAChBG,EAASH,EAAO,GAAGI,SAASC,OAEhC9B,EAAKQ,OAASA,EACdR,EAAK+B,IAAM,IAAIvB,EAAOwB,KAAKC,IAAIvB,SAASwB,eAAe,OAAQ,CAC7DC,KAAM,GACNC,OAAQ,CAAEC,IAAK,QAASC,KAAM,YAIhCtC,EAAKuC,QAAU,GACfX,EAAOY,QAAQ,SAAAC,GACb,IAAIC,EAAS,IAAIlC,EAAOwB,KAAKW,OAAO,CAClCC,SAAU,CAAEP,IAAKI,EAAMI,SAASR,IAAKC,IAAKG,EAAMI,SAASP,KACzDP,IAAK/B,EAAK+B,IACVe,GAAIL,EAAMK,GACVC,KAAMN,EAAMM,KACZC,UAAWxC,EAAOwB,KAAKiB,UAAUC,OAIpCR,EAAOS,YAAY,QAAS,WACI,OAA1BT,EAAOU,eACTV,EAAOW,aAAa,MAEpBX,EAAOW,aAAa7C,EAAOwB,KAAKiB,UAAUK,QAE5CC,WAAW,WACTb,EAAOW,aAAa,OACnB,4CAYP,OACEG,EAAAC,EAAA9C,cAAA,OAAKmC,GAAG,eAtDIY,aEMEC,QACW,cAA7BrD,OAAOuC,SAASe,UAEe,UAA7BtD,OAAOuC,SAASe,UAEhBtD,OAAOuC,SAASe,SAASC,MACvB,2DCZNC,IAASC,OAAOP,EAAAC,EAAA9C,cAACqD,EAAD,MAAStD,SAASwB,eAAe,SD2H3C,kBAAmB+B,WACrBA,UAAUC,cAAcC,MAAM/C,KAAK,SAAAgD,GACjCA,EAAaC","file":"static/js/main.267b0d0a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport { loadMap, loadPlaces } from './utils';\r\n\r\nclass App extends Component {\r\n componentDidMount() {\r\n   //preps data even before map is displayed\r\n   //will be easier to access / interact with data as properties\r\n   let mapsPromise = loadMap();\r\n   let placesPromise = loadPlaces();\r\n\r\n   Promise.all([\r\n     mapsPromise,\r\n     placesPromise\r\n   ]).then(values => {\r\n     console.log(values);\r\n     let google = values[0];\r\n     let places = values[1].response.venues;\r\n     \r\n     this.google = google; \r\n     this.map = new google.maps.Map(document.getElementById('map'), {\r\n       zoom: 13,\r\n       center: { lat: 45.5122, lng: -122.6587 }\r\n     });\r\n     \r\n     //Add marker on map for each place\r\n     this.markers = [];\r\n     places.forEach(venue => {\r\n       let marker = new google.maps.Marker({\r\n         position: { lat: venue.location.lat, lng: venue.location.lng },\r\n         map: this.map,\r\n         id: venue.id,\r\n         name: venue.name,\r\n         animation: google.maps.Animation.DROP\r\n\r\n       });\r\n\r\n      marker.addListener('click', () => {\r\n        if (marker.getAnimation() !== null) {\r\n          marker.setAnimation(null);\r\n        } else {\r\n          marker.setAnimation(google.maps.Animation.BOUNCE);\r\n        }\r\n        setTimeout(() => {\r\n          marker.setAnimation(null)\r\n        }, 1000);\r\n      }) \r\n     })\r\n\r\n\r\n\r\n\r\n   });\r\n }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"map\">\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","/* Helper functions for app */\r\n\r\n// This function helps load Google Maps more easily into components.\r\n// The function returns a promise, and the Maps JavaScript API\r\n// is loaded asynchronously. The promise is resolved when the Maps API finishes\r\n// loading and the callback function is deleted since it is no longer needed.\r\n// Credit: Ryan Waite, FEND Webinar\r\n// https://github.com/ryanwaite28/script-store/blob/master/js/react_resolve_google_maps.js\r\n\r\nexport function loadMap() {\r\n    return new Promise(function(resolve, reject) {\r\n        // global (window) callback function which resolves promise when the google object loads\r\n        window.resolveMapsPromise = function() {\r\n\r\n            resolve(window.google);\r\n\r\n            delete window.resolveMapsPromise;\r\n        }\r\n\r\n        const script = document.createElement('script');\r\n        const API_KEY = 'AIzaSyC8vDwnM3yUOP2GRv4kwFQg6We60BRrDN0';\r\n        \r\n        //Load Maps API\r\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${API_KEY}&callback=resolveMapsPromise`;\r\n        script.async = true;\r\n        document.body.appendChild(script);\r\n    })\r\n}\r\n\r\n// This function gets places data using the Foursquare API\r\n// https://developer.foursquare.com/docs\r\n\r\nexport function loadPlaces() {\r\n    const CLIENT_ID = '0OM1NOQ1YQMD3HBYBJT3MPFOZSB0XJYAWR3QEVI4NZF4SZOJ',\r\n          CLIENT_SECRET = '1Y0XUO1GBRCCAZMOKAWNDSSTWRDV0FDAWYMSH3MAD5FNNGLM';  \r\n    let ll = '45.5122,-122.6587',\r\n        query = 'bar';\r\n    \r\n    let fsAPI = `https://api.foursquare.com/v2/venues/search?client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}&limit=50&query=${query}&ll=${ll}&radius=50000&intent=browse&v=20190122`;\r\n\r\n    return fetch(fsAPI).then(resp => resp.json());\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
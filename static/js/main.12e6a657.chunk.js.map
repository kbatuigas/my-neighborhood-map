{"version":3,"sources":["logo.svg","App.js","utils.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","_this","this","mapsPromise","Promise","resolve","reject","window","resolveMapsPromise","google","script","document","createElement","src","concat","async","body","appendChild","all","then","values","map","maps","Map","getElementById","zoom","center","lat","lng","react_default","a","id","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6LCkCzBC,8LA3BM,IAAAC,EAAAC,KAEdC,ECCI,IAAIC,QAAQ,SAASC,EAASC,GAEjCC,OAAOC,mBAAqB,WAExBH,EAAQE,OAAOE,eAERF,OAAOC,oBAGlB,IAAME,EAASC,SAASC,cAAc,UAItCF,EAAOG,IAAP,+CAAAC,OAHgB,0CAGhB,gCACAJ,EAAOK,OAAQ,EACfJ,SAASK,KAAKC,YAAYP,KDd/BN,QAAQc,IAAI,CACVf,IACCgB,KAAK,SAAAC,GACN,IAAIX,EAASW,EAAO,GAEpBnB,EAAKQ,OAASA,EACdR,EAAKoB,IAAM,IAAIZ,EAAOa,KAAKC,IAAIZ,SAASa,eAAe,OAAQ,CAC7DC,KAAM,GACNC,OAAQ,CAAEC,IAAK,QAASC,KAAM,+CAQjC,OACEC,EAAAC,EAAAlB,cAAA,OAAKmB,GAAG,eAtBIC,aEMEC,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOT,EAAAC,EAAAlB,cAAC2B,EAAD,MAAS5B,SAASa,eAAe,SD2H3C,kBAAmBgB,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.12e6a657.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { loadMap } from './utils';\n\nclass App extends Component {\n componentDidMount() {\n   //will be easier to access / interact with data as properties\n   let mapsPromise = loadMap();\n\n   Promise.all([\n     mapsPromise\n   ]).then(values => {\n     let google = values[0];\n     \n     this.google = google; \n     this.map = new google.maps.Map(document.getElementById('map'), {\n       zoom: 13,\n       center: { lat: 45.5122, lng: -122.6587 }\n     });\n\n   });\n }\n\n\n  render() {\n    return (\n      <div id=\"map\">\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/* Helper functions for app */\r\n\r\n// This function helps load Google Maps more easily into components.\r\n// The function returns a promise, and the Maps JavaScript API\r\n// is loaded asynchronously. The promise is resolved when the Maps API finishes\r\n// loading and the callback function is deleted since it is no longer needed.\r\n// Credit: Ryan Waite, FEND Webinar\r\n// https://github.com/ryanwaite28/script-store/blob/master/js/react_resolve_google_maps.js\r\n\r\nexport function loadMap() {\r\n    return new Promise(function(resolve, reject) {\r\n        // global (window) callback function which resolves promise when the google object loads\r\n        window.resolveMapsPromise = function() {\r\n\r\n            resolve(window.google);\r\n\r\n            delete window.resolveMapsPromise;\r\n        }\r\n\r\n        const script = document.createElement('script');\r\n        const API_KEY = 'AIzaSyC8vDwnM3yUOP2GRv4kwFQg6We60BRrDN0';\r\n        \r\n        //Load Maps API\r\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${API_KEY}&callback=resolveMapsPromise`;\r\n        script.async = true;\r\n        document.body.appendChild(script);\r\n    })\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/FilterWindow.js","App.js","utils.js","serviceWorker.js","index.js"],"names":["FilterWindow","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this","react_default","a","createElement","id","className","for","type","value","query","onChange","e","filterplaces","target","placelist","length","map","place","index","key","onClick","placelistclick","name","location","address","city","state","postalCode","Component","App","filterPlaces","bind","assertThisInitialized","placeListClick","_this2","mapsPromise","Promise","resolve","reject","window","resolveMapsPromise","google","script","document","src","concat","async","body","appendChild","placesPromise","fsAPI","fetch","then","resp","json","loadPlaces","all","values","places","response","venues","maps","Map","getElementById","zoom","center","lat","lng","setState","placeList","markers","forEach","marker","Marker","position","animation","Animation","DROP","push","placeInfo","event","addListener","infowindow","setContent","setCenter","open","getAnimation","setAnimation","BOUNCE","setTimeout","InfoWindow","p","filter","toLowerCase","includes","setVisible","clickedPlace","m","components_FilterWindow","role","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"0OAiDeA,cA5CX,SAAAA,EAAYC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACVH,0EAQD,IAAAO,EAAAJ,KACL,OACIK,EAAAC,EAAAC,cAAA,OAAKC,GAAG,iBACJH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACXJ,EAAAC,EAAAC,cAAA,SAAOG,IAAI,gBAAX,gBACAL,EAAAC,EAAAC,cAAA,SAAOI,KAAK,SAASH,GAAG,eAAeI,MAAOZ,KAAKH,MAAMgB,MAAOC,SAAU,SAACC,GACvEX,EAAKP,MAAMmB,aAAaD,EAAEE,OAAOL,WAGrCP,EAAAC,EAAAC,cAAA,eACIF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACXJ,EAAAC,EAAAC,cAAA,MAAIE,UAAW,eAGTT,KAAKH,MAAMqB,WAAalB,KAAKH,MAAMqB,UAAUC,OAAS,GAAKnB,KAAKH,MAAMqB,UAAUE,IAAI,SAACC,EAAOC,GAAR,OAClFjB,EAAAC,EAAAC,cAAA,MAAIgB,IAAKD,EAAOb,UAAU,aAAae,QAAS,WAC5CpB,EAAKP,MAAM4B,eAAeJ,KAE1BhB,EAAAC,EAAAC,cAAA,KAAGE,UAAU,cAAcY,EAAMK,MACjCrB,EAAAC,EAAAC,cAAA,KAAGE,UAAU,iBAAiBY,EAAMM,SAASC,QAA7C,KAAwDP,EAAMM,SAASE,KAAvE,KAA+ER,EAAMM,SAASG,MAA9F,IAAsGT,EAAMM,SAASI,0BA7BlIC,aCqJZC,cAjJb,SAAAA,EAAYpC,GAAO,IAAAO,EAAA,OAAAN,OAAAC,EAAA,EAAAD,CAAAE,KAAAiC,IACjB7B,EAAAN,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmC,GAAA9B,KAAAH,KAAMH,KACDiC,MAAQ,CACXjB,MAAO,IAITT,EAAK8B,aAAe9B,EAAK8B,aAAaC,KAAlBrC,OAAAsC,EAAA,EAAAtC,QAAAsC,EAAA,EAAAtC,CAAAM,KAEpBA,EAAKiC,eAAiBjC,EAAKiC,eAAeF,KAApBrC,OAAAsC,EAAA,EAAAtC,QAAAsC,EAAA,EAAAtC,CAAAM,KATLA,mFAYC,IAAAkC,EAAAtC,KAGduC,ECbG,IAAIC,QAAQ,SAASC,EAASC,GAEjCC,OAAOC,mBAAqB,WAExBH,EAAQE,OAAOE,eAERF,OAAOC,oBAGlB,IAAME,EAASC,SAASxC,cAAc,UAItCuC,EAAOE,IAAP,+CAAAC,OAHgB,0CAGhB,gCACAH,EAAOI,OAAQ,EACfH,SAASI,KAAKC,YAAYN,KDD1BO,ECQD,WACH,IAKIC,EAAK,yDAAAL,OALS,mDAKT,mBAAAA,OAJa,mDAIb,oBAAAA,OAFG,MAEH,QAAAA,OAHA,oBAGA,0CAET,OAAOM,MAAMD,GAAOE,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SDhBlBC,GAEpBnB,QAAQoB,IAAI,CACVrB,EACAc,IACCG,KAAK,SAAAK,GACN,IAAIhB,EAASgB,EAAO,GACpBvB,EAAKwB,OAASD,EAAO,GAAGE,SAASC,OAEjC1B,EAAKO,OAASA,EACdP,EAAKlB,IAAM,IAAIyB,EAAOoB,KAAKC,IAAInB,SAASoB,eAAe,OAAQ,CAC7DC,KAAM,GACNC,OAAQ,CAAEC,IAAK,QAASC,KAAM,YAGhCjC,EAAKkC,SAAS,CAAEC,UAAWnC,EAAKwB,SAGhCxB,EAAKoC,QAAU,GAEfpC,EAAKwB,OAAOa,QAAQ,SAAAtD,GAClB,IAAIuD,EAAS,IAAI/B,EAAOoB,KAAKY,OAAO,CAClCC,SAAU,CAAER,IAAKjD,EAAMM,SAAS2C,IAAKC,IAAKlD,EAAMM,SAAS4C,KACzDnD,IAAKkB,EAAKlB,IACVZ,GAAIa,EAAMb,GACVkB,KAAML,EAAMK,KACZqD,UAAWlC,EAAOoB,KAAKe,UAAUC,OAKnC3C,EAAKoC,QAAQQ,KAAKN,GAGlB,IAAIO,EACF,oCAAsC9D,EAAMK,KAAO,gDACPL,EAAMM,SAASC,QAAS,SAClEP,EAAMM,SAASE,KAAO,KAAOR,EAAMM,SAASG,MAAQ,IAAMT,EAAMM,SAASI,WAAa,SAE1Fc,EAAOoB,KAAKmB,MAAMC,YAAYT,EAAQ,QAAS,WAC7CtC,EAAKgD,WAAWC,WAAWJ,GAC3B7C,EAAKlB,IAAIoE,UAAUZ,EAAOE,UAC1BxC,EAAKgD,WAAWG,KAAKnD,EAAKlB,IAAKwD,KAIjCA,EAAOS,YAAY,QAAS,WACI,OAA1BT,EAAOc,eACTd,EAAOe,aAAa,MAEpBf,EAAOe,aAAa9C,EAAOoB,KAAKe,UAAUY,QAE5CC,WAAW,WACTjB,EAAOe,aAAa,OACnB,SAIPrD,EAAKgD,WAAa,IAAIzC,EAAOoB,KAAK6B,kDAWzBjF,GACX,IAAIkF,EAAI/F,KAAK8D,OAAOkC,OAAO,SAAA3E,GAAK,OAAIA,EAAMK,KAAKuE,cAAcC,SAC3DrF,EAAMoF,iBAERjG,KAAK0E,QAAQC,QAAQ,SAAAC,GACfA,EAAOlD,KAAKuE,cAAcC,SAC5BrF,EAAMoF,eAENrB,EAAOuB,YAAW,GAElBvB,EAAOuB,YAAW,KAItBnG,KAAKwE,SAAS,CAACC,UAAWsB,EAAGlF,iDAGhBQ,GACb,IAAI+E,EAAepG,KAAK0E,QAAQsB,OAAO,SAAAK,GAAC,OAAIA,EAAE7F,KAAOa,EAAMb,KAAI,GAE/DR,KAAKsF,WAAWC,WACd,oCAAsClE,EAAMK,KAAO,gDACHL,EAAMM,SAASC,QAAS,SAClEP,EAAMM,SAASE,KAAO,KAAOR,EAAMM,SAASG,MAAQ,IAAMT,EAAMM,SAASI,WAAa,UAE9F/B,KAAKoB,IAAIoE,UAAUY,EAAatB,UAChC9E,KAAKsF,WAAWG,KAAKzF,KAAKoB,IAAKgF,GAEK,OAAhCA,EAAaV,eACfU,EAAaT,aAAa,MAE1BS,EAAaT,aAAa3F,KAAK6C,OAAOoB,KAAKe,UAAUY,QAEvDC,WAAW,WACTO,EAAaT,aAAa,OACzB,sCAMH,OACEtF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAChBJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,aAAd,yBAEFJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAC+F,EAAD,CACEtF,aAAchB,KAAKkC,aACnBhB,UAAWlB,KAAK8B,MAAM2C,UACtBhD,eAAgBzB,KAAKqC,iBAEvBhC,EAAAC,EAAAC,cAAA,QAAMC,GAAG,MAAM+F,KAAK,yBA1IZvE,aEKZwE,EAAcC,QACW,cAA7B9D,OAAOhB,SAAS+E,UAEe,UAA7B/D,OAAOhB,SAAS+E,UAEhB/D,OAAOhB,SAAS+E,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTrD,KAAK,SAAA0D,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBtF,QACfiF,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,gHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,UAO5BU,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KC1FjEC,IAASC,OAAO1H,EAAAC,EAAAC,cAACyH,EAAD,MAASjF,SAASoB,eAAe,SDgB1C,SAAkB2C,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,uBAAwBvF,OAAOhB,SAASwG,MACpDC,SAAWzF,OAAOhB,SAASyG,OAIvC,OAGFzF,OAAO0F,iBAAiB,OAAQ,WAC9B,IAAMxB,EAAK,GAAA5D,OAAMiF,uBAAN,sBAEP1B,GAgEV,SAAiCK,EAAOC,GAEtCvD,MAAMsD,GACHrD,KAAK,SAAAO,GAEJ,IAAMuE,EAAcvE,EAASwE,QAAQC,IAAI,gBAEnB,MAApBzE,EAAS0E,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C3B,UAAUC,cAAc2B,MAAMnF,KAAK,SAAA0D,GACjCA,EAAa0B,aAAapF,KAAK,WAC7Bb,OAAOhB,SAASkH,aAKpBjC,EAAgBC,EAAOC,KAG1Bc,MAAM,WACLJ,QAAQC,IACN,mEArFAqB,CAAwBjC,EAAOC,GAI/BC,UAAUC,cAAc2B,MAAMnF,KAAK,WACjCgE,QAAQC,IACN,+GAMJb,EAAgBC,EAAOC,MCvC/BE","file":"static/js/main.4b1c108c.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\n//import { loadPlaces } from '../utils.js'\r\n\r\nclass FilterWindow extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    /*componentDidMount() {\r\n        //console.log(this.props);\r\n    }\r\n    */\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"filter-window\">\r\n                <div className=\"search\">\r\n                    <label for=\"place-search\">Search Bars:</label>\r\n                    <input type=\"search\" id=\"place-search\" value={this.props.query} onChange={(e) => {\r\n                        this.props.filterplaces(e.target.value)\r\n                    } }/>\r\n                </div>\r\n                    <section>\r\n                        <div className=\"places\">\r\n                            <ol className =\"places-list\">\r\n                                {/*Important! Props need to have been passed down - not including this.props.placelist\r\n                                    will cause entire app to not render at all */ }\r\n                                { this.props.placelist && this.props.placelist.length > 0 && this.props.placelist.map((place, index) => (\r\n                                    <li key={index} className=\"place-item\" onClick={() => {\r\n                                        this.props.placelistclick(place);\r\n                                    }} >\r\n                                        <p className=\"place-name\">{place.name}</p>\r\n                                        <p className=\"place-address\">{place.location.address}, {place.location.city}, {place.location.state} {place.location.postalCode}</p> \r\n                                    </li>\r\n                                ))\r\n                                }\r\n                            </ol>\r\n                            \r\n                        </div>\r\n                    </section>\r\n\r\n                \r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default FilterWindow;","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport { loadMap, loadPlaces } from './utils';\r\n\r\nimport FilterWindow from './components/FilterWindow';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      query: ''\r\n    }\r\n    // Bind the function properly to give it the correct context!\r\n    // Otherwise places remains undefined in the callback!\r\n    this.filterPlaces = this.filterPlaces.bind(this);\r\n\r\n    this.placeListClick = this.placeListClick.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    //preps data even before map is displayed\r\n    //will be easier to access / interact with data as properties\r\n    let mapsPromise = loadMap();\r\n    let placesPromise = loadPlaces();\r\n\r\n    Promise.all([\r\n      mapsPromise,\r\n      placesPromise\r\n    ]).then(values => {\r\n      let google = values[0];\r\n      this.places = values[1].response.venues; //this allows data to be accessed as component property\r\n     \r\n      this.google = google; \r\n      this.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 13,\r\n        center: { lat: 45.5122, lng: -122.6587 }\r\n      });\r\n     \r\n      this.setState({ placeList: this.places }); // List of places includes all, by default\r\n\r\n      //Add marker on map for each place\r\n      this.markers = [];\r\n\r\n      this.places.forEach(place => {\r\n        let marker = new google.maps.Marker({\r\n          position: { lat: place.location.lat, lng: place.location.lng },\r\n          map: this.map,\r\n          id: place.id,\r\n          name: place.name,\r\n          animation: google.maps.Animation.DROP\r\n\r\n        });\r\n\r\n\r\n        this.markers.push(marker);\r\n        \r\n        \r\n        let placeInfo = \r\n          '<div className=\"infowindow-name\">' + place.name + '</div>' + \r\n          '<div className=\"infowindow-address\"><p>' + place.location.address +'<br />' +\r\n            place.location.city + ', ' + place.location.state + ' ' + place.location.postalCode + '</div>';\r\n        \r\n        google.maps.event.addListener(marker, 'click', () => {\r\n          this.infowindow.setContent(placeInfo);\r\n          this.map.setCenter(marker.position);\r\n          this.infowindow.open(this.map, marker);\r\n\r\n        })\r\n\r\n        marker.addListener('click', () => {\r\n          if (marker.getAnimation() !== null) {\r\n            marker.setAnimation(null);\r\n          } else {\r\n            marker.setAnimation(google.maps.Animation.BOUNCE);\r\n          }\r\n          setTimeout(() => {\r\n            marker.setAnimation(null)\r\n          }, 1000);\r\n        }); \r\n      });\r\n\r\n      this.infowindow = new google.maps.InfoWindow(); \r\n\r\n    });\r\n\r\n\r\n  }\r\n\r\n  // FilterWindow component passes data (query) up to App, which\r\n  // can then be used as filter criteria for both the map as well \r\n  // as the sidebar. This function shows/hides marker based on\r\n  // whether the place name matches the search term\r\n  filterPlaces(query) {\r\n    let p = this.places.filter(place => place.name.toLowerCase().includes(\r\n      query.toLowerCase()\r\n    ));\r\n    this.markers.forEach(marker => {\r\n      if (marker.name.toLowerCase().includes(\r\n        query.toLowerCase()\r\n      )) {\r\n        marker.setVisible(true);\r\n      } else {\r\n        marker.setVisible(false);\r\n      }\r\n    })\r\n\r\n    this.setState({placeList: p, query }); // List of places filtered \r\n  }\r\n\r\n  placeListClick(place) {\r\n    let clickedPlace = this.markers.filter(m => m.id === place.id)[0];\r\n    \r\n    this.infowindow.setContent(\r\n      '<div className=\"infowindow-name\">' + place.name + '</div>' + \r\n          '<div className=\"infowindow-address\"><p>' + place.location.address +'<br />' +\r\n            place.location.city + ', ' + place.location.state + ' ' + place.location.postalCode + '</div>'\r\n    );\r\n    this.map.setCenter(clickedPlace.position);\r\n    this.infowindow.open(this.map, clickedPlace);\r\n\r\n    if (clickedPlace.getAnimation() !== null) {\r\n      clickedPlace.setAnimation(null);\r\n    } else {\r\n      clickedPlace.setAnimation(this.google.maps.Animation.BOUNCE);\r\n    }\r\n    setTimeout(() => {\r\n      clickedPlace.setAnimation(null)\r\n    }, 1000);\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\" >\r\n        <header className=\"App-header\">\r\n          <h1 className=\"App-title\">Bars in Portland, OR</h1>\r\n        </header>\r\n        <div className=\"container\" >\r\n          <FilterWindow \r\n            filterplaces={this.filterPlaces}\r\n            placelist={this.state.placeList}\r\n            placelistclick={this.placeListClick}\r\n          />\r\n          <main id=\"map\" role=\"application\" />\r\n        </div>\r\n      </div>\r\n        \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","/* Helper functions for app */\r\n\r\n// This function helps load Google Maps more easily into components.\r\n// The function returns a promise, and the Maps JavaScript API\r\n// is loaded asynchronously. The promise is resolved when the Maps API finishes\r\n// loading and the callback function is deleted since it is no longer needed.\r\n// Credit: Ryan Waite, FEND Webinar\r\n// https://github.com/ryanwaite28/script-store/blob/master/js/react_resolve_google_maps.js\r\n\r\nexport function loadMap() {\r\n    return new Promise(function(resolve, reject) {\r\n        // global (window) callback function which resolves promise when the google object loads\r\n        window.resolveMapsPromise = function() {\r\n\r\n            resolve(window.google);\r\n\r\n            delete window.resolveMapsPromise;\r\n        }\r\n\r\n        const script = document.createElement('script');\r\n        const API_KEY = 'AIzaSyC8vDwnM3yUOP2GRv4kwFQg6We60BRrDN0';\r\n        \r\n        //Load Maps API\r\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${API_KEY}&callback=resolveMapsPromise`;\r\n        script.async = true;\r\n        document.body.appendChild(script);\r\n    })\r\n}\r\n\r\n// This function gets places data using the Foursquare API\r\n// https://developer.foursquare.com/docs\r\n\r\nexport function loadPlaces() {\r\n    const CLIENT_ID = '0OM1NOQ1YQMD3HBYBJT3MPFOZSB0XJYAWR3QEVI4NZF4SZOJ',\r\n          CLIENT_SECRET = '1Y0XUO1GBRCCAZMOKAWNDSSTWRDV0FDAWYMSH3MAD5FNNGLM';  \r\n    let ll = '45.5122,-122.6587',\r\n        query = 'bar';\r\n    \r\n    let fsAPI = `https://api.foursquare.com/v2/venues/search?client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}&limit=50&query=${query}&ll=${ll}&radius=50000&intent=browse&v=20190122`;\r\n\r\n    return fetch(fsAPI).then(resp => resp.json());\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}